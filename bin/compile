#!/usr/bin/env bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir="${3}"
buildpack=$(cd "$(dirname $0)/.." && pwd)
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

steptxt="----->"
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m' # No Color
CURL="curl -s -L --retry 15 --retry-delay 2" # retry for up to 30 seconds

default_crystal_version="0.20.1"
default_shards_version="0.7.1"
shard_yml="${build}/shard.yml"

warn() {
    echo -e "${YELLOW} !!    $@${NC}"
}

err() {
    echo -e >&2 "${RED} !!    $@${NC}"
}

step() {
    echo "$steptxt $@"
}

start() {
    echo -n "$steptxt $@... "
}

finished() {
    echo "done"
}

# Return the location for known versions, otherwise return a generic URL.
# Also catch any old versions where `shards` wasn't a thing yet.
url_for_crystal() {
    local ver=$1
    case $ver in
    0.1.*|0.2.*|0.3.*|0.4.*|0.5.*|0.6.*|0.7.*)
        err ""
        err "Shards is incompatible with Crystal $ver."
        err ""
        exit 1
        ;;
    *)
        local file=${CRYSTAL_FILE:-crystal-$ver-1-linux-x86_64.tar.gz}
        echo https://github.com/crystal-lang/crystal/releases/download/$ver/$file
        ;;
    esac
}

# Report deprecated versions to user
report_crystal_ver() {
  case $1 in
    0.8*|0.9*|0.10*|0.11*|0.12*|0.13*|0.14*|0.15*|0.16*|0.17*|0.18*|0.19*|0.20*)
      # Noop
    ;;
    *)
      warn ""
      warn "Deprecated or unsupported version of Crystal ($1)"
      warn "See https://github.com/fishworks/heroku-buildpack-crystal#crystal-versions for supported version information."
      warn ""
    ;;
  esac
}

set_crystal_version_from_environment() {
  if test -z "${CRYSTAL_VERSION}"
  then
    warn ""
    warn "'CRYSTAL_VERSION' isn't set, defaulting to '${default_crystal_version}'"
    warn ""
    warn "Run 'heroku config:set CRYSTAL_VERSION=X.Y.Z' to set the Crystal version to use"
    warn "for future builds"
    warn ""
  fi
  crystal_ver=${CRYSTAL_VERSION:-$default_crystal_version}
}

warn_crystal_version_override() {
  if test ! -z "${CRYSTAL_VERSION}"
  then
    warn "Using \$CRYSTAL_VERSION override."
    warn "     \$CRYSTAL_VERSION = ${CRYSTAL_VERSION}"
    warn ""
    warn "If this isn't what you want please run:'"
    warn "  heroku config:unset CRYSTAL_VERSION -a <app>"
    warn ""
  fi
}

url_for_shards() {
    local ver=$1
    local file=${SHARDS_FILE:-shards-${ver}_linux_x86_64.gz}
    echo https://github.com/crystal-lang/shards/releases/download/v$ver/$file
}

# Report deprecated versions to user
report_shards_ver() {
  case $1 in
    0.7.*)
      # Noop
    ;;
    *)
      warn ""
      warn "Deprecated or unsupported version of Shards ($1)"
      warn ""
    ;;
  esac
}

set_shards_version_from_environment() {
  if test -z "${SHARDS_VERSION}"
  then
    warn ""
    warn "'SHARDS_VERSION' isn't set, defaulting to '${default_shards_version}'"
    warn ""
    warn "Run 'heroku config:set SHARDS_VERSION=X.Y.Z' to set the Shards version to use"
    warn "for future builds"
    warn ""
  fi
  shards_ver=${SHARDS_VERSION:-$default_shards_version}
}

warn_shards_version_override() {
  if test ! -z "${SHARDS_VERSION}"
  then
    warn "Using \$SHARDS_VERSION override."
    warn "     \$SHARDS_VERSION = ${SHARDS_VERSION}"
    warn ""
    warn "If this isn't what you want please run:'"
    warn "  heroku config:unset SHARDS_VERSION -a <app>"
    warn ""
  fi
}

determine_tool() {
    if test -f "${shard_yml}"
    then
        TOOL="shards"
    else
        err "Shards is required. For instructions:"
        err "https://github.com/fishworks/heroku-buildpack-crystal#readme"
        exit 1
    fi
}

determine_tool
set_crystal_version_from_environment
crystal_url=${CRYSTAL_URL:-$(url_for_crystal $crystal_ver)}

if test -e $build/bin && ! test -d $build/bin
then
    err ""
    err "File bin exists in the application and is not a directory."
    err ""
    exit 1
fi

report_crystal_ver $crystal_ver

# install crystal
if test -d "${cache}/crystal-${crystal_ver}"
then
    step "Using crystal ${crystal_ver}"
else
    mkdir -p "${cache}/crystal-${crystal_ver}"
    odir="$(pwd)"
    cd "${cache}/crystal-${crystal_ver}"
    start "Installing crystal-${crystal_ver}"
        ${CURL} ${crystal_url} | tar zxf -
    finished
    cd $odir
fi

set_shards_version_from_environment
shards_url=${SHARDS_URL:-$(url_for_shards $shards_ver)}

# install shards
if test -d "${cache}/shards-${shards_ver}"
then
    step "Using shards ${shards_ver}"
else
    mkdir -p "${cache}/shards-${shards_ver}/bin"
    odir="$(pwd)"
    cd "${cache}/shards-${shards_ver}/bin"
    start "Installing shards-${shards_ver}"
        ${CURL} ${shards_url} | gunzip - > shards
        chmod 755 shards
    finished
    cd $odir
fi

mkdir -p $build/bin
export CRYSTAL_ROOT="${cache}/crystal-${crystal_ver}/crystal-${crystal_ver}-1"
export SHARDS_ROOT="${cache}/shards-${shards_ver}"
PATH="${PATH}:${CRYSTAL_ROOT}/bin:${SHARDS_ROOT}/bin"


cd "${build}"

# `shards check` currently does not work with apps with no external dependencies.
# See https://github.com/crystal-lang/shards/issues/145
# TODO(bacongobbler): re-test this once shards v0.8.0 is out
# step "Checking project with \`shards check\`"
# if ! shards check
# then
#   exit 1
# fi

step "Running \`shards install\`"
shards install

step "Running \`shards build heroku\`"
shards build heroku

if test ! -z "${src}" -a "${src}" != "${build}" -a -e "${src}/Procfile"
then
  mv -t "${build}" "${src}/Procfile"
fi

if ! test -e $build/Procfile && test -n "${name}"
then
  echo -e "web: heroku" >> $build/Procfile
fi

cd $build
mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/crystal.sh
